kind tm type.

type abs (tm -> tm) -> tm.
type con int -> tm.
type app list tm -> tm.

pred copy i:tm, o:tm.
% The following rules are well moded
copy (con N) (con N).
copy (app L) (app M) :- std.map L copy M.
copy (abs X) (abs Y) :- pi x\ copy x x => copy (X x) (Y x).

% The following rules are semantically meaningless
% They are however good tests for mode checking

pred p i:tm.
p X :- pi x\ (p x, (p x :- p Z)) => p X. % Here the premise (p Z) is not well-moded
p X :- pi x\ (p x :- p (con Z)) => p X. % Again Z is passed not ground in (con Z)
p X :- pi x\ (p x :- p x) => p (con 3). % Here the x in the premise (p x) is good
p X :- pi x\ (pi y\ p x :- p y) => p x. % Here y is flex but in input pos
p T :- (pi x\ p x :- p x) => p (app [T, abs x\x]). % Here x is deduced from the input

pred q i:prop, o:prop.
q A R :- A, R = A. % Everything goes moothly!
q A R :- R, R = A. % Mh, R is output, ie supposed flex

pred r0 i:(pred i:A, i:B), i:A, i:B.
r0 F A B :- F A B.

pred r1 i:(pred i:A, i:B, i:C), i:A, i:B, o:C.
r1 F A B C :- F A B C. % Not good: C is in output but used as input in F

main.