/* elpi: embedded lambda prolog interpreter                                  */
/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

% --------- HOAS or programs  ------------------------------------------------

kind typ type. %%%%% types %%%%%%

type arrow typ -> typ -> typ.
type tconst string -> typ.
type tapp list typ -> typ.
type prop typ.
type forall (typ -> typ) -> typ. % polymorphic type declarations
type ctype string -> typ.

% --------- utils  ---------------------------------------------------------

type (`:) term -> typ -> entry.
type (`:=) string -> typ -> entry.

% --------- error reporting  ------------------------------------------------
kind err type.
type type-err term -> typ -> typ -> err.
type wrong-arity term -> typ -> list term -> err.
type unknown term -> err.
type assert prop -> err -> prop.

pred error i:list (pair (ctype "Loc.t") string), o:bool.

:name "default-typechecking-error"
error Msg tt :- std.forall Msg (x\ sigma L M\ fst x L, snd x M, print L "Error:" M).

pred warning i:(ctype "Loc.t"), o:string.
:name "default-typechecking-warning"
warning Loc Msg :- print Loc "Warning:" Msg.

pred assert i:prop, i:err.
assert P _ :- P, !.
assert P (type-err T Ty ETy) :- !,
  checking LOC,
  ppt Ty TyPP, ppt ETy ETyPP,
  if (TyPP = ETyPP) (term_to_string Ty TyS, term_to_string ETy ETyS) (TyS = TyPP, ETyS = ETyPP),
  MSG is {pp T} ^ " has type " ^ TyS ^
         " but is used with type " ^ ETyS,
  error [pr LOC MSG] _.
assert _ (wrong-arity T Ty A) :- !,
  checking LOC,
  MSG is {pp T} ^ " has type " ^ {ppt Ty} ^
          " but is applied to " ^ {pp-list A},
  error [pr LOC MSG] _.

pred stash-new i:A, i:B.
stash-new E S :- open_safe E L, ( std.mem! L S ; stash_in_safe E S ), !.

report-all-failures-if-no-success P RC :-
  new_safe E,
  (((pi ML\ error ML _ :- !, std.forall ML (stash-new E), fail) => P)
   ;
   (error {open_safe E} RC)).
report-all-failures-and-fail-if-no-success P RC :-
  new_safe E,
  (((pi ML\ error ML _ :- !, std.forall ML (stash-new E), fail) => P)
   ;
   (error {open_safe E} RC, fail)).

pred pp i:term, o:string.
pp (app L) T1 :- !, pp-list L T, T1 is "(" ^ T ^ ")".
pp (lam F) T :- !, pi x\ term_to_string x XS, (pp x XS :- !) => pp (F x) T.
pp (const "discard") "_" :- !.
pp (const S) S :- !.
pp (cdata X) S :- !, term_to_string X S.
pp X XS :- term_to_string X XS.

pred pp-list i:list term, o:string.
pp-list [X] Y :- !, pp X Y.
pp-list [X|XS] Y :- pp-list XS XSS, pp X XT, Y is XT ^ " " ^ XSS.
pp-list [] "".

pred ppt i:typ, o:string.
ppt (ctype S) X :- !, X is "(ctype " ^ S ^ ")".
ppt (tconst X) X :- !.
ppt (tapp L) X :- !, ppt-list L T, X is "(" ^ T ^ ")".
ppt (arrow A B) S :- !, ppt A AS, ppt B BS, S is "(" ^ AS ^ " -> " ^ BS ^ ")".
ppt X Y :- term_to_string X Y.

pred ppt-list i:list typ, o:string.
ppt-list [X] Y :- !, ppt X Y.
ppt-list [X|XS] Y :- ppt-list XS XSS, ppt X XT, Y is XT ^ " " ^ XSS.
ppt-list [] "".

% --------- typing  -------------------------------------------------------

pred unif i:typ, i:typ.
unif A B :- (A = B ; rm-any-variadic A A1, rm-any-variadic B B1, A1 = B1), !.

pred rm-any-variadic i:typ, o:typ.
rm-any-variadic (tconst S as C) X :- !, if (S = "any") (X = FRESH_) (X = C).
rm-any-variadic (tapp [tconst "variadic",_,X]) X1 :- !, rm-any-variadic X X1.
rm-any-variadic (tapp L) (tapp L1) :- !, rm-any-variadic-list L L1.
rm-any-variadic (ctype _ as X) X.
rm-any-variadic prop prop.
rm-any-variadic (arrow A1 B1) (arrow A2 B2) :- rm-any-variadic A1 A2, rm-any-variadic B1 B2.
rm-any-variadic (uvar as X) X.

pred rm-any-variadic-list i:list typ, o:list typ.
rm-any-variadic-list [] [].
rm-any-variadic-list [X|XS] [Y|YS] :- rm-any-variadic X Y, rm-any-variadic-list XS YS.

:index(2)
pred of i:term, o:typ.

of (cdata CData) Ty :-
  is_cdata CData (ctype CTy), !,
  assert (unif Ty (ctype CTy)) (type-err (cdata CData) (ctype CTy) Ty).

of (app [HD|ARGS]) TY :- !, 
  report-all-failures-if-no-success % HD may have multiple types
   (of HD HDTY, of-app HDTY ARGS TY HD (Done - Done)) _.
of (lam F) (arrow T B) :- !, pi x\
  (of x T :- !) => of (F x) B.

pred of-app i:typ i:list term, o:typ, o:term, o:A.

:if "DEBUG:CHECKER"
of-app Ty Args Tgt Hd _ :-
  print {trace.counter "run"} "of-app" {pp Hd} ":" {ppt Ty} "@" {pp-list Args} "=" {ppt Tgt}, fail.

of-app (tapp [tconst "variadic", T, _] as V) [X|XS] TGT HD (B - BT) :- !,
  of X TX, assert (unif T TX) (type-err X TX T), BT = X :: TL, of-app V XS TGT HD (B - TL).
of-app (tapp [tconst "variadic", _, TS]) [] TGT HD (D - []) :- !,
  assert (unif TGT TS) (type-err (app [HD|D]) TS TGT).
of-app (arrow T TS) [X|XS] TGT HD (B - BT) :- !,
  of X TX, assert (unif T TX) (type-err X TX T), BT = X :: TL, of-app TS XS TGT HD (B - TL).
of-app (uvar as ARR)  [X|XS] TGT HD (B - BT) :- !,
  of X T, ARR = arrow T TS, BT = X :: TL, of-app TS XS TGT HD (B - TL).
of-app Ty [] TGT HD (D - []) :- !,
  assert (unif TGT Ty) (type-err (app [HD|D]) Ty TGT).
of-app (uvar as Ty)  [] TGT HD (D - []) :- !,
  assert (unif TGT Ty) (type-err (app [HD|D]) Ty TGT).

of-app Ty Args _ HD (D - []) :- !,
  assert false (wrong-arity (app [HD|D]) Ty Args).

pred of-clause i:list string, i:term.
of-clause [N|NS] (arg C) :- !, pi x\ 
 (pp x N :- !) => (pi Tf\ of x Tf :- !, assert (unif T Tf) (type-err x T Tf)) =>
 of-clause NS (C x).
of-clause [] (arg C) :- !, pi x\ 
 (pi Tf\ of x Tf :- !, assert (unif T Tf) (type-err x T Tf)) =>
 of-clause [] (C x).
of-clause _ C :- of C TC, assert (unif TC prop) (type-err C TC prop).

type checking (ctype "Loc.t") -> prop.

:if "DEBUG:CHECKER"
log-tc-clause Loc Query :- !, print {trace.counter "run"} "typecheck" Loc Query.
log-tc-clause _ _.

pred typecheck i:list term, i:term, i:float, i:A, i:B.
typecheck P _ T0 NP _RC :- D is {gettimeofday} - T0, D > 10.0, !,
  print "[skipping" {std.length P} "clauses out of" NP "due to time limit]".

typecheck [] (clause Loc Names Query) _ _ RC :-
  log-tc-clause Loc Query,
  checking Loc =>
    report-all-failures-if-no-success (of-clause Names Query) RC.
typecheck [ (clause Loc Names Clause) | Rest] Q T0 NP RC :-
  % print "Typechecking Clause" Names Clause,
  log-tc-clause Loc Clause,
  checking Loc =>
    report-all-failures-if-no-success (of-clause Names Clause) RC, !,
  typecheck Rest Q T0 NP RC.

% mode (refresh i o).
pred refresh i:typ, o:typ.
refresh (forall F) T :- !, refresh (F FRESH_) T.
refresh (tconst "any") FRESH_ :- !.
refresh X X.

% mode (safe-dest-app i o o).
safe-dest-app (app [X | A]) X A :- !.
safe-dest-app X X [].

collect-symbols-term N X X :- name N, !.
collect-symbols-term (cdata _) X X :- !.
collect-symbols-term (app []) X X :- !.
collect-symbols-term (app [HD|L]) Acc Res :- !,
  collect-symbols-term HD Acc Acc1,
  collect-symbols-term (app L) Acc1 Res.
collect-symbols-term (lam F) Acc Res :- !,
  pi x\ collect-symbols-term (F x) Acc Res.
collect-symbols-term (arg F) Acc Res :- !,
  pi x\ collect-symbols-term (F x) Acc Res.
collect-symbols-term (const S) Acc Res :- !,
  if (std.string.map.mem S Acc) (Res = Acc)
     (checking Loc, std.string.map.add S Loc Acc Res).

collect-symbols-clause (clause Loc _ C) Acc Res :-
  checking Loc => collect-symbols-term C Acc Res.

collect-symbols-program [ C | P ] Acc Res :-
  collect-symbols-clause C Acc Acc1,
  collect-symbols-program P Acc1 Res.
collect-symbols-program [] X X.

pred under-env i:A, i:B.

type known term -> prop.

pred similar i:A, i:B.
similar S1 S2 :-
  R is ".*\\." ^ {rex_replace "[\\+\\*]" "." S2},
  rex_match R S1.

pred filter-similar i:A, i:B, o:C.
filter-similar [] _ [].
filter-similar [const K `: _ |KS] S [K|R] :- similar K S, !, filter-similar KS S R.
filter-similar [_|KS] S R :- filter-similar KS S R.

pred str_concat i:list string, o:string.
str_concat [] "".
str_concat [S|SS] R :- str_concat SS RR, R is S ^ " " ^ RR.

pred warn-undeclared i:A, i:B, o:C.
warn-undeclared _Known (pr ( "main") _) ff :- !.
warn-undeclared _ (pr ( S) _) ff :- rex_match ".*\\.aux" S, !.
warn-undeclared _ (pr ( S) _) ff :- rex_match ".*\\.aux\\." S, !.
warn-undeclared Known (pr ( S) LOC) tt :-
  filter-similar Known S Hints,
  if (Hints = []) (H = "") (H is " Did you mean " ^ {str_concat Hints} ^ "?"),
  MSG is "constant " ^ S ^ " has no declared type." ^ H,
  warning LOC MSG.

pred forall_uto10 i:A, i:B, i:C.
forall_uto10 [] _ _ :- !.
forall_uto10 [X|XS] N P :- N < 10, !,
  P X Done, !,
  if (Done = tt) (M is N + 1) (M = N),
  forall_uto10 XS M P.
forall_uto10 ([pr _ LOC|_] as L) _ _ :-
  Msg is "[suppressing " ^ {term_to_string {std.length L}} ^ " warnings]",
  warning LOC Msg.
  
pred under-decl-env i:A, i:B.
under-decl-env [] P :- P.
under-decl-env [ X `: PT | XS ] P :-
  %print "Assume" X PT,
  (pi Ty\ of X Ty :- refresh PT Ty) => known X => under-decl-env XS P.

under-undecl-env [] P :- P.
under-undecl-env [ pr X _ | XS ] P :-
  %print "Assume" X PT,
  (of (const X) Ty_ :- !) => under-undecl-env XS P.

pred rm-known i:A, i:B, o:C.
rm-known (const N `: _) S S1 :- std.string.map.remove N S S1.

:if "TIME:CHECKER"
timing S P :- !, std.time P Time, print S Time.
timing _ P :- P.

pred check-all-symbols i:std.string.map loc.
:name "check-all-symbols:main"
check-all-symbols _.

pred typecheck-program i:A, i:B, i:C, o:D.
:name "typecheck-program:main"
typecheck-program P Q DeclaredTypes RC :-
  KnownTypes = [
    ((const "pi") `: forall x\ (arrow (arrow x prop) prop)),
    ((const "sigma") `: forall x\ (arrow (arrow x prop) prop)),
    ((const "discard") `: forall x\ x)|DeclaredTypes],
  timing "collect prog" (collect-symbols-program P {std.string.map.empty} TMP),
  collect-symbols-clause Q TMP AllSymbols,
  check-all-symbols AllSymbols,
  std.fold KnownTypes AllSymbols rm-known Unknown,
  std.string.map.bindings Unknown Undeclared,
  forall_uto10 {std.rev Undeclared} 0 (warn-undeclared KnownTypes), !,
  timing "typecheck "
         (under-decl-env {std.rev KnownTypes}
           (under-undecl-env Undeclared
             (typecheck P Q {gettimeofday} {std.length P} RC))).

% ---------- warnings ------------------------------------------------------
% elpi:skip 1
infix >>> 141.

type (>>>) term -> int -> entry.
type variable term -> prop.

pred silence-linear-warning i:string.
silence-linear-warning VN :- rex_match "^_.*" VN ; rex_match ".*_$" VN.

pred report-linear i:A.
report-linear [].
report-linear [(V >>> 1 + uvar) |NS] :- !,
  pp V VN,
  if (not(silence-linear-warning VN))
    (checking LOC,
     MSG is VN ^" is linear: name it _" ^ VN ^
         " (discard) or " ^ VN ^ "_ (fresh variable)",
     warning LOC MSG)
    true,
  report-linear NS.
report-linear [(V >>> uvar) |NS] :-
  pp V VN,
  if (not(silence-linear-warning VN))
    (checking LOC, MSG is VN ^" is unused", warning LOC MSG)
    true,
  report-linear NS.
report-linear [(_ >>> _) | NS] :- report-linear NS.

pred count i:A, i:list B.
count (lam F) E :- pi x\ count (F x) E.
count (app [X|XS]) E :- !, count X E, count (app XS) E.
count (app []) _ :- !.
count X E :- variable X, !, incr X E.
count _ _.

pred incr i:A, i:B.
incr X [(X >>> K) | _] :- add1 K.
incr X [_ | XS] :- incr X XS.

pred add1 i:A.
add1 (uvar as K) :- K = 1 + FRESH_.
add1 (1 + K) :- add1 K.

pred check-non-linear i:A, i:B, i:C.
check-non-linear [N|NS] (arg C) L :- pi x\
 (pp x N :- !) => (variable x) => check-non-linear NS (C x) [(x >>> FRESH_) | L].
check-non-linear [] (arg C) L :- pi x\
 (variable x) => check-non-linear _ (C x) [(x >>> FRESH_) | L].
check-non-linear _ C L :-
  count C L, report-linear L.

pred warn-linear i:A.
:name "warn-linear:main"
warn-linear [].
warn-linear [ (clause Loc Names Clause) |CS] :-
  checking Loc =>  check-non-linear Names Clause [],
  warn-linear CS.

% ---------- test ----------------------------------------------------------

main.

% ------- entry ---------------------------------------

pred type->ppt-clause i:A, i:B, i:C, o:D.
type->ppt-clause S ACC (forall F) (pi C) :- !,
  pi x\ type->ppt-clause S [x|ACC] (F x) (C x).
type->ppt-clause S [] T (pi Str\ ppt T Str :- !, ppt (tconst S) Str).
type->ppt-clause S ACC T (pi Str\ ppt T Str :- !, ppt (tapp [tconst S|Args]) Str) :- std.rev ACC Args.

pred compile-type-abbreviations i:A, o:B.
compile-type-abbreviations [] [].
compile-type-abbreviations [(_ `:= tconst _)|TS] Clauses :- !,
  % we don't refold immediate aliases
  compile-type-abbreviations TS Clauses.
compile-type-abbreviations [(X `:= ctype Y)|TS] Clauses :- not(X = Y), !,
  % we don't refold immediate aliases
  compile-type-abbreviations TS Clauses.
compile-type-abbreviations [(S `:= T)|TS] [Clause|Clauses] :-
  type->ppt-clause S [] T Clause,
  compile-type-abbreviations TS Clauses.

macro @rigid-term :- (cdata "rigid-term").

to-constant V :- V = @rigid-term.

pred to-rigid-term i:term.
to-rigid-term N :- name N, !.
to-rigid-term V :- var V, !, to-constant V.
to-rigid-term (cdata (uvar _ as V)) :- !, to-constant V.
to-rigid-term (cdata _) :- !.
to-rigid-term (app L) :- !, std.forall L to-rigid-term.
to-rigid-term (lam F) :- !, pi x\ to-rigid-term (F x).
to-rigid-term (const _) :- !.
to-rigid-term A :- halt "Error in to-rigid-term" A.

pred is-rigid-term i:term.
is-rigid-term N :- name N, !.
is-rigid-term V :- var V, !, fail.
is-rigid-term (cdata (uvar _ as V)) :- !, to-constant V.
is-rigid-term (cdata _) :- !.
is-rigid-term (app L) :- !, std.forall L is-rigid-term.
is-rigid-term (lam F) :- !, pi x\ is-rigid-term (F x).
is-rigid-term (const _) :- !.
is-rigid-term A :- halt "Error in is-rigid-term" A.

pred build-mode i:list A, o:list bool.
build-mode L R :- std.map L (x\r\ r = mode-fo false) R.

pred add-no-modes o:list A, i:A.
add-no-modes X T :- var X, !, X = [T|Y_], print "No mode for" T.
add-no-modes [X|_] Y :- not (var X), X = Y, !.
add-no-modes [X|Xs] T :- var Xs, !, print "No mode for" X, Xs = [T|Y_].
add-no-modes [_|Xs] T :- !, add-no-modes Xs T.

pred find-mode.aux i:A, i:B, i:C, i:D, o:E.
find-mode.aux [] NoModes_ X _ _ :- fatal-no-mode, halt "Check-well-modes-negative: no mode for" X.
find-mode.aux [] NoModes X Args R :- !, add-no-modes NoModes X, build-mode Args R .
find-mode.aux [pr X R|_] _ X _ R :- !.
find-mode.aux [_ | Xs] NoModes X Args R :- !, find-mode.aux Xs NoModes X Args R.

pred find-mode i:A, i:B, o:C.
find-mode X Args R :- modes Modes, no-modes NoModes, find-mode.aux Modes NoModes X Args R. 

pred get-head-mode i:A, o:B.
get-head-mode (mode-fo M) M :- !.
get-head-mode (mode-ho M _) M :- !.

pred set-head-mode i:A, i:B.
set-head-mode Head Args :-
  find-mode Head Args Mode, !,
  if ({std.length Mode} = {std.length Args}) 
    (std.forall2 Mode Args (m\t\ if (get-head-mode m true) (to-rigid-term t) true)) 
    (print "Invalid mode length for (2)" Head Loc).
set-head-mode _ _.

pred get-vars i:term, o:list string.
get-vars N [] :- name N, !.
get-vars (cdata _ as X) [] :- !.
get-vars (app L) L'' :- !, std.map L get-vars L', std.flatten L' L''.
get-vars (lam F) L :- !, pi x\ get-vars (F x) L.
get-vars (const T) [] :- !.
get-vars A [B] :- var A, !, pp A B.
get-vars A _ :- halt "Error in get-vars" A.

pred check-head-output i:A, i:B, i:C.
check-head-output Head Args Loc :-
  find-mode Head Args Mode, !, 
  std.forall2 Mode Args (m\t\ sigma Vars\
    std.assert! (get-vars t Vars) "Should not fail",
    if (get-head-mode m true) true (if (Vars = []) true (
      print "WARNING: The variables" Vars "are in output position of the predicate\"" Head "\"and cannot be ensured to be ground" Loc))).
check-head-output _ _ _.

pred variadic-mode i:A.
variadic-mode (const "halt").
variadic-mode (const "print").

pred is-ho-predicate i:A.
is-ho-predicate (@rigid-term).

pred map-var o:A, i:string, o:prop.
map-var V S R :- var V, !, R = (pp X S :- var V, same_term X V, !).

pred copy i:term, o:term.
copy N N :- name N, !.
copy (cdata _ as X) X :- !.
copy (app L) (app L'):- !, std.map L copy L'.
copy (lam F) (lam F') :- !, pi x\ copy (F x) (F' x).
copy (const T) (const T) :- !.
copy A A :- var A, !.
copy A _ :- halt "Error in copy" A.

pred check-args-mode i:D, o:A, i:B, i:C, i:prop, i:term.
check-args-mode HD _ _ Loc Mode Arg :-
  get-head-mode Mode ModeP,
  ModeP, get-vars Arg L, not (L = []), !,
  if (fatal-no-mode) (halt "WARNING: Not ground" Arg' "passed to" HD Loc) (print "WARNING: Not ground" {pp Arg} "passed to" {pp HD} Loc).
% TODO: following rule aims to go under lambda which are args of a predicate
%       however, this is gives a error if partial application is used
% check-args-mode _ NoModes AllModes Loc Mode Arg :-
%   Mode, Arg = lam L, !,
%   print ("Going under lambda") Arg,
%   pi x\ std.assert!(check-well-moded-negative NoModes AllModes Loc (L x)) "Should not fail".
check-args-mode _ _ _ _ Mode Arg :- get-head-mode Mode ModeP, ModeP, !.
check-args-mode _ _ _ _ Mode Arg :- get-head-mode Mode ModeP, not ModeP, to-rigid-term Arg.

pred check-well-moded-negative i:A, i:B.
check-well-moded-negative _        N :- name N, !.
% check-well-moded-negative _        V :- var V, !, to-constant V.
check-well-moded-negative _        (cdata (uvar _ as V)) :- !, to-constant V.
check-well-moded-negative _        (cdata _) :- !.
check-well-moded-negative Loc (app [const "," | L]) :- !,
  std.forall L (x\ if (var x) ((fatal-no-mode, halt "WARNING: Passed flexible to ," Loc); print "WARNING: Passed flexible to ," Loc) 
  (check-well-moded-negative Loc x)).
check-well-moded-negative Loc (app [const "pi", lam B]) :- !,
  pi x\ check-well-moded-negative Loc (B x).
check-well-moded-negative Loc (app [const "=>", Hyp, Body]) :- !,
  check-well-moded-positive Hyp Loc [],
  check-well-moded-negative Loc Body.
check-well-moded-negative _ (app [HD|_]) :- variadic-mode HD, !.
check-well-moded-negative Loc (app [HD|Args]) :- !,
  if (var HD) 
    (if (fatal-no-mode) (halt "WARNING: Flex head symbol" HD "at" Loc) (print "WARNING: Flex head symbol" HD "at" Loc))
    true,
  find-mode HD Args Mode,
  % print "Mode is" Mode,
  if ({std.length Mode} = {std.length Args}) 
    (std.forall2 Mode Args (x\y\std.assert!(check-args-mode HD NoModes AllModes Loc x y) "Mh")) 
    (print "Invalid mode length for" HD Loc).
check-well-moded-negative Loc (lam F) :- !, 
  pi x\ check-well-moded-negative Loc (F x).
check-well-moded-negative _       (const _ as _) :- !.

pred check-well-moded-negative-list i:A, i:B.
check-well-moded-negative-list [] _ :- !.
check-well-moded-negative-list [X | Xs] Loc :-
  check-well-moded-negative Loc X,
  check-well-moded-negative-list Xs Loc.

pred to-check i:A.
to-check _ :- fail, !, true.
% to-check "r1" :- !.

pred check-well-moded-positive-ho-mode i:list term, i:list A, i:list term, i:B.
check-well-moded-positive-ho-mode [A|As] [mode-fo X|Ms] Prem Loc :- !,
  if X (to-rigid-term A) true, 
  check-well-moded-positive-ho-mode As Ms Prem Loc.
check-well-moded-positive-ho-mode [A|As] [mode-ho true M|Ms] Prem Loc :- var A, !,
  pi x\ (pi X\ copy X x :- same_term X A, !) => std.map Prem copy (Prem' x), !, 
  modes Modes,
  (modes [pr x M | Modes] :- !) => check-well-moded-positive-ho-mode As Ms (Prem' x) Loc.
check-well-moded-positive-ho-mode [_|As] [_|Ms] Prem Loc :- !,
  check-well-moded-positive-ho-mode As Ms Prem Loc.
check-well-moded-positive-ho-mode [] [] Prem Loc :- check-well-moded-negative-list Prem Loc.

% mode (check-well-moded-positive i i i i).
pred check-well-moded-positive i:C, i:D, i:E.
check-well-moded-positive X Loc _ :- var X, print "WARNING: Got uvar in check well-moded-positive" Loc.
check-well-moded-positive (arg B) Loc [N|Names] :- !,
  map-var X N P,
  P => check-well-moded-positive (B X) Loc Names.
check-well-moded-positive (const _) _ _ :- !.
check-well-moded-positive (app [(const ":-"), (app [Head | Args]) | Prem]) Loc Names_ :-
  % print "Checking mode positive of" Head Args ":-" Prem,
  % set-head-mode Head Args,
  find-mode Head Args Mode,
  check-well-moded-positive-ho-mode Args Mode Prem Loc,
  check-head-output Head Args Loc.
check-well-moded-positive (app [(const ":-"), (const _) | Prem]) Loc Names_ :- !,
   check-well-moded-negative-list Prem Loc.
check-well-moded-positive (app [(const "pi"), lam B]) Loc Names :- !,
  check-well-moded-positive (B X_) Loc Names.
check-well-moded-positive (app [(const ",") | L]) Loc Names :- !,
  std.forall L (x\ check-well-moded-positive x Loc Names).
check-well-moded-positive (app ([const "::", A, L])) Loc Names :- !,
  check-well-moded-positive A Loc Names,
  check-well-moded-positive L Loc Names.
check-well-moded-positive (app _ as App) Loc Names :- !, 
  check-well-moded-positive (app [(const ":-"), App]) Loc Names.
check-well-moded-positive (@rigid-term) _ _ :- !.
check-well-moded-positive A _ _ :- halt "check-well-moded-positive: Uncaught branch in" A.

pred head-symbol i:term, o:string.
head-symbol (arg Ag) S :- pi x\ head-symbol (Ag x) S.
head-symbol (const C) C.
head-symbol (app [const ":-", X | _]) S :- !, head-symbol X S.
head-symbol (app [const C|L]) C.

pred check-well-moded-prog i:A.
check-well-moded-prog [] :- !.
check-well-moded-prog [clause Loc Vars Body | Tl] :-
  if (to-check {head-symbol Body})
    (check-well-moded-positive Body Loc Vars) true,
  check-well-moded-prog Tl.

check-overlapping-prog [] _ :- !.

pred check i:A, i:B, i:C, i:D, i:E, i:F.
:name "check:main"
check P Q DeclaredTypes TypeAbbreviations Modes _FuncPred :-
  compile-type-abbreviations TypeAbbreviations Abbrevs,
  Abbrevs => typecheck-program P Q DeclaredTypes RC, !,
  warn-linear P, !,
  if (var RC) (true) (fail),
  (modes Modes, no-modes NoModes_) => check-well-moded-prog P.

% vim: set ft=lprolog:
